# -*- coding: utf-8 -*-
"""In&Out Attendance.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15rgjrVhxHGCeZAN-Go4Zwysiz5ZZ1PqD
"""

#Installation
# !pip install pandas
# !pip install xlsxwriter
# !pip install openpyxl
# !pip install numpy

#Imports
import io
from xlsxwriter.workbook import Workbook
import csv
import pandas as pd
import xlrd
from datetime import datetime
from datetime import date, timedelta
import random
import numpy as np
import openpyxl
import os
from openpyxl import load_workbook
from openpyxl.utils import get_column_letter
from openpyxl.styles import Font
from openpyxl.styles import Border, Side
import random
from datetime import datetime, timedelta

def generate_data(length):
    data = []
    for _ in range(length):
        intime = datetime.strptime('10:00 AM', '%I:%M %p') + timedelta(minutes=random.randint(-7, 7))
        outtime = intime + timedelta(hours=random.uniform(4, 4.25))
        total = outtime - intime
        data.append({'intime': intime.strftime('%I:%M %p'), 'outtime': outtime.strftime('%I:%M %p'), 'total': str(total)[0:4]})
    return data
#Constants
WEEKDAYS={
    0:"M",
    1:"T",
    2:"W",
    3:"TH",
    4:"F",
    5:"S",
    6:"SU",
}
DAYS_31=['01','03','05','07','08','10','12']
DAYS_30=['04','06','09','11']
DAYS_29=['02']

HEADINGS={'P1':'MONTHLY STATUS REPORT',
          'P2':'20 FEB 2024 TO 29 FEB 2024',
          'A3':'COMPANY: MEPSC',
          'N3':'COLLEGE NAME: ',
          'Z3':'PRINTED ON: 01 MAR 2024 12:01 PM'
         }

DAYS_COLUMN_REL={
   1:'B',2:'C',3:'D',4:'E',5:'F',6:'G',7:'H',8:'I',9:'J',10:'K',11:'L',12:'M',13:'N',14:'O',15:'P',16:'Q',
   17:'R',18:'S',19:'T',20:'U',21:'V',22:'W',23:'X',24:'Y',25:'Z',26:'AA',27:'AB',28:'AC',29:'AD',30:'AE',31:'AF'
}

#Inputs
MONTH = '2024-01'
DATE_FORMAT = '%Y-%m-%d'
START_DATE = '2024-02-20'
END_DATE = '2024-02-29'
HOLIDAYS = []

def clear_excel():
  wb = load_workbook(r'C:\Projects\In&OutAttendance\empty_input.xlsx')

# Iterate through each sheet and clear its contents
  for sheet_name in wb.sheetnames:
      sheet = wb[sheet_name]
      for row in sheet.iter_rows():
          for cell in row:
              cell.value = None

  # Save the workbook
  wb.save(r'C:\Projects\In&OutAttendance\empty_input.xlsx')

def daterange(start_date, end_date):
    for n in range(int((end_date - start_date).days)+1):
        yield start_date + timedelta(n)


def distribute_attendance(present_days, total_days):
    present_days = present_days
    attendance = ['P'] * present_days + ['A'] * (total_days - present_days)
    random.shuffle(attendance)
    return attendance

def total_possible_days(month,date_format):
  month_days=""
  available_days = []
  available_days.append('DAYS')
  if month[5:] in DAYS_31:
     month_days+="-31"
     for single_date in daterange(datetime.strptime(str(month)+"-01",date_format), datetime.strptime(str(month)+"-31",date_format)):
        available_days.append(str(single_date.day)+" "+WEEKDAYS[int(single_date.weekday())])
  if month[5:] in DAYS_30:
     month_days+="-30"
     for single_date in daterange(datetime.strptime(str(month)+"-01",date_format), datetime.strptime(str(month)+"-30",date_format)):
        available_days.append(str(single_date.day)+" "+WEEKDAYS[int(single_date.weekday())])
  if month[5:] in DAYS_29:
     month_days+="-29"
     for single_date in daterange(datetime.strptime(str(month)+"-01",date_format), datetime.strptime(str(month)+"-29",date_format)):
        available_days.append(str(single_date.day)+" "+WEEKDAYS[int(single_date.weekday())])
  return available_days


def holiday_days():
  holiday_dates = []
  for i in HOLIDAYS:
    date=WEEKDAYS[datetime.strptime(i,DATE_FORMAT).weekday()]
    if date!='SU':
      holiday_dates.append(str(datetime.strptime(i,DATE_FORMAT).day)+" "+str(date))
  return holiday_dates

def sundays():
  sunday_dates=[]
  for single_date in daterange(datetime.strptime(START_DATE,DATE_FORMAT), datetime.strptime(END_DATE,DATE_FORMAT)):
      if WEEKDAYS[int(single_date.weekday())]=='SU':
          sunday_dates.append(str(single_date.day)+" "+WEEKDAYS[int(single_date.weekday())])
  return sunday_dates

def loadfile(file_path):
  data = pd.read_csv(file_path)
  return data

def merge_rows_for_headings(empty_file,row_no):

  # Load the Excel file
  wb = load_workbook(empty_file)

  # Select the worksheet
  ws = wb['Sheet1']

  # Specify the row you want to merge
  row_to_merge = row_no

  # Get the number of columns in the worksheet
  num_columns = ws.max_column

  # Get the range of cells in the specified row
  row_range = ws[f'A{row_to_merge}:{get_column_letter(num_columns)}{row_to_merge}']

  # Join the values of all cells in the row into a single string
  merged_value = ' '.join([cell.value if cell.value else '' for cell in row_range[0]])

  # Clear the contents of the cells in the row
  for cell in row_range[0]:
      cell.value = None

  # Set the merged value in the first cell of the row
  ws.cell(row=row_to_merge, column=1, value=merged_value)

  # Save the modified Excel file
  wb.save('empty_input.xlsx')

def fill_headings(file_path,text,position):
  wb = load_workbook(file_path)

  # Select the worksheet
  ws = wb['Sheet1']

  # Specify the cell coordinates where you want to insert the value
  cell_to_insert = position  # Example: insert value into cell A1

  # Insert the value into the specified cell
  value_to_insert = text
  ws[cell_to_insert] = value_to_insert
  bold_font = Font(bold=True)
  ws[cell_to_insert].font = bold_font

  # Save the modified Excel file
  wb.save(file_path)

def add_borders(file_path,rows_index):
  wb = load_workbook(file_path)

  # Select the worksheet
  ws = wb['Sheet1']  # Replace 'Sheet1' with the name of your sheet

  # Specify the row for which you want to add borders
  for i in rows_index:
    row_index = i

    # Specify the border style (you can customize this as needed)
    border = Border(top=Side(style='thin'), bottom=Side(style='thin'), left=Side(style='thin'), right=Side(style='thin'))

    # Apply the border style to each cell in the specified row
    for cell in ws[row_index]:
        cell.border = border

    # Save the modified Excel file
    wb.save(file_path)

def add_days_columns(file_path,available_days):
  wb = load_workbook(file_path)

  # Select the worksheet
  ws = wb['Sheet1']

  row_index = 6  # Example: insert elements into row 1

  # Define the list of elements to insert
  elements_list = available_days  # Example list of elements
  border = Border(top=Side(style='thin'), bottom=Side(style='thin'), left=Side(style='thin'), right=Side(style='thin'))
  # Iterate over the list and insert each element into the corresponding cell in the row
  for col_index, value in enumerate(elements_list, start=1):
      ws.cell(row=row_index, column=col_index, value=value).font=Font(bold=True)
      ws.cell(row=row_index, column=col_index).border = border

    # Save the modified Excel file
  wb.save(file_path)

no_of_days=abs((datetime.strptime(END_DATE,DATE_FORMAT).date()-datetime.strptime(START_DATE,DATE_FORMAT).date()).days)+1
no_of_days=no_of_days-(len(holiday_days())+len(sundays()))

def enter_department_details(file_path,department_name,batch):
    wb = load_workbook(file_path)
    ws = wb['Sheet1']
    cell_to_insert = "A7"

    value_to_insert = "DEPARTMENT: "+str(department_name)
    ws[cell_to_insert] = value_to_insert

    cell_to_insert = "A4"

    value_to_insert = str(batch)
    ws[cell_to_insert] = value_to_insert
    bold_font = Font(bold=True)
    ws[cell_to_insert].font = bold_font
    wb.save(value_to_insert+".xlsx")
def input_for_a_student(file_path,center_students):
    index = 8
    wb = load_workbook(file_path)
    ws = wb['Sheet1']
    for student in center_students:
      present_days=random.randrange(int(no_of_days*0.9),int(no_of_days))
      present_days_list=distribute_attendance(present_days,no_of_days)
      sundays_list = sundays()
      holiday_list = holiday_days()
      start_col=datetime.strptime(START_DATE,DATE_FORMAT).day
      present_added_index = 0
      keys=list(DAYS_COLUMN_REL.keys())
      time_list = generate_data(len(present_days_list))
      for key_index,i in enumerate(keys):
        if key_index>=start_col-1 and present_added_index<len(present_days_list):
          # print(ws[DAYS_COLUMN_REL[i]+str(6)].value)
          if ws[DAYS_COLUMN_REL[i]+str(6)].value not in holiday_list and ws[DAYS_COLUMN_REL[i]+str(6)].value not in sundays_list:
            ws[DAYS_COLUMN_REL[i]+str(index+1)] = present_days_list[present_added_index]
            if present_days_list[present_added_index] == 'A':
               ws[DAYS_COLUMN_REL[i]+str(index+2)] = "-" 
               ws[DAYS_COLUMN_REL[i]+str(index+3)] = "-" 
               ws[DAYS_COLUMN_REL[i]+str(index+4)] = "-" 
            else:  
              ws[DAYS_COLUMN_REL[i]+str(index+2)] = time_list[present_added_index]['intime']
              ws[DAYS_COLUMN_REL[i]+str(index+3)] = time_list[present_added_index]['outtime']
              ws[DAYS_COLUMN_REL[i]+str(index+4)] = time_list[present_added_index]['total']
            present_added_index+=1
          else:
            ws[DAYS_COLUMN_REL[i]+str(index+1)] = 'WO'
            ws[DAYS_COLUMN_REL[i]+str(index+2)] = "-" 
            ws[DAYS_COLUMN_REL[i]+str(index+3)] = "-" 
            ws[DAYS_COLUMN_REL[i]+str(index+4)] = "-" 
        else:
          continue      
      # Name and Code row
    
      ws = wb['Sheet1']
      cell_to_insert = "A"+str(index)

      value_to_insert = "EMP CODE:"+str(student['MAHAJYOTI KVY BATCH ID'])+"                 EMP NAME:"+str(student['Student Name'])
      ws[cell_to_insert] = value_to_insert

      #Status
      ws = wb['Sheet1']
      cell_to_insert = "A"+str(index+1)
      border = Border(top=Side(style='thin'), bottom=Side(style='thin'), left=Side(style='thin'), right=Side(style='thin'))

      # Apply the border style to each cell in the specified row
      for cell in ws[index+1]:
          cell.border = border
      value_to_insert = "Status"
      ws[cell_to_insert] = value_to_insert
      ws[cell_to_insert].font = Font(bold=True)

      #In time
      ws = wb['Sheet1']
      cell_to_insert = "A"+str(index+2)
      border = Border(top=Side(style='thin'), bottom=Side(style='thin'), left=Side(style='thin'), right=Side(style='thin'))

      # Apply the border style to each cell in the specified row
      for cell in ws[index+2]:
          cell.border = border
      value_to_insert = "In Time"
      ws[cell_to_insert] = value_to_insert
      ws[cell_to_insert].font = Font(bold=True)

      #Outtime

      ws = wb['Sheet1']
      cell_to_insert = "A"+str(index+3)
      border = Border(top=Side(style='thin'), bottom=Side(style='thin'), left=Side(style='thin'), right=Side(style='thin'))

      # Apply the border style to each cell in the specified row
      for cell in ws[index+3]:
          cell.border = border
      value_to_insert = "Out Time"
      ws[cell_to_insert] = value_to_insert
      ws[cell_to_insert].font = Font(bold=True)

      #Total
      ws = wb['Sheet1']
      cell_to_insert = "A"+str(index+4)
      border = Border(top=Side(style='thin'), bottom=Side(style='thin'), left=Side(style='thin'), right=Side(style='thin'))

      # Apply the border style to each cell in the specified row
      for cell in ws[index+4]:
          cell.border = border
      value_to_insert = "Total"
      ws[cell_to_insert] = value_to_insert
      ws[cell_to_insert].font = Font(bold=True)
      print("Added Student : "+str(student['Student Name']))
      index+=6
    wb.save(file_path)
    

if __name__=="__main__":
  df = pd.read_excel(r"C:\Projects\In&OutAttendance\new-exc.xlsx")
  # colleges = set(df['Training Center Address'].to_list())
  
  # print(colleges)
  for k in range(34,37):
    batch = "BATCH "+str(k)
    college_name=df[df['BATCHWISE SR.NO.'] == batch]['COLLEGE NAME'].to_list()[0]
    HEADINGS['N3'] = "COLLEGE NAME: "+str(college_name)          
    print(holiday_days())
    # print(sundays())
    clear_excel()
    merge_rows_for_headings(r'C:\Projects\In&OutAttendance\empty_input.xlsx',1)
    merge_rows_for_headings(r'C:\Projects\In&OutAttendance\empty_input.xlsx',2)
    merge_rows_for_headings(r'C:\Projects\In&OutAttendance\empty_input.xlsx',3)
    merge_rows_for_headings(r'C:\Projects\In&OutAttendance\empty_input.xlsx',4)
    for i in HEADINGS:
      fill_headings(r'C:\Projects\In&OutAttendance\empty_input.xlsx',HEADINGS[i],i)
    available_days = total_possible_days(MONTH,DATE_FORMAT)
    add_days_columns(r'C:\Projects\In&OutAttendance\empty_input.xlsx',available_days)
    enter_department_details(r'C:\Projects\In&OutAttendance\empty_input.xlsx','CUSTOMIZED OFFICE MANAGEMENT & EMPLOYABILITY SKILL DEVELOPMENT',batch)
    center_students=[]
    for index,student in df.iterrows():
       if batch==student['BATCHWISE SR.NO.']:
          center_students.append(student)
    input_for_a_student(batch+'.xlsx',center_students)